/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface GroupingFactoryV10Interface extends ethers.utils.Interface {
  functions: {
    "deployed(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "deployGrouping(address,address)": FunctionFragment;
    "getDeployed()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "deployed",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "initialize", values: [string]): string;
  encodeFunctionData(
    functionFragment: "deployGrouping",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getDeployed",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "deployed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deployGrouping",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDeployed",
    data: BytesLike
  ): Result;

  events: {
    "DeployGrouping(address,address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DeployGrouping"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class GroupingFactoryV10 extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: GroupingFactoryV10Interface;

  functions: {
    deployed(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    "deployed(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    /**
     * Tells the address of the owner return the address of the owner
     */
    owner(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Tells the address of the owner return the address of the owner
     */
    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Allows the current owner to transfer control of the contract to a newOwner.
     * @param newOwner The address to transfer ownership to.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Allows the current owner to transfer control of the contract to a newOwner.
     * @param newOwner The address to transfer ownership to.
     */
    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    initialize(
      _multisigWallet: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(address)"(
      _multisigWallet: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    deployGrouping(
      _rgToken: string,
      _erc721: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "deployGrouping(address,address)"(
      _rgToken: string,
      _erc721: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getDeployed(overrides?: CallOverrides): Promise<[string[]]>;

    "getDeployed()"(overrides?: CallOverrides): Promise<[string[]]>;
  };

  /**
   * Tells the address of the owner return the address of the owner
   */
  owner(overrides?: CallOverrides): Promise<string>;

  /**
   * Tells the address of the owner return the address of the owner
   */
  "owner()"(overrides?: CallOverrides): Promise<string>;

  /**
   * Allows the current owner to transfer control of the contract to a newOwner.
   * @param newOwner The address to transfer ownership to.
   */
  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Allows the current owner to transfer control of the contract to a newOwner.
   * @param newOwner The address to transfer ownership to.
   */
  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  initialize(
    _multisigWallet: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(address)"(
    _multisigWallet: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  deployGrouping(
    _rgToken: string,
    _erc721: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "deployGrouping(address,address)"(
    _rgToken: string,
    _erc721: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getDeployed(overrides?: CallOverrides): Promise<string[]>;

  "getDeployed()"(overrides?: CallOverrides): Promise<string[]>;

  callStatic: {
    deployed(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "deployed(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * Tells the address of the owner return the address of the owner
     */
    owner(overrides?: CallOverrides): Promise<string>;

    /**
     * Tells the address of the owner return the address of the owner
     */
    "owner()"(overrides?: CallOverrides): Promise<string>;

    /**
     * Allows the current owner to transfer control of the contract to a newOwner.
     * @param newOwner The address to transfer ownership to.
     */
    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Allows the current owner to transfer control of the contract to a newOwner.
     * @param newOwner The address to transfer ownership to.
     */
    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(
      _multisigWallet: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address)"(
      _multisigWallet: string,
      overrides?: CallOverrides
    ): Promise<void>;

    deployGrouping(
      _rgToken: string,
      _erc721: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "deployGrouping(address,address)"(
      _rgToken: string,
      _erc721: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getDeployed(overrides?: CallOverrides): Promise<string[]>;

    "getDeployed()"(overrides?: CallOverrides): Promise<string[]>;
  };

  filters: {
    DeployGrouping(
      grouping: string | null,
      _rgToken: string | null,
      _erc721: string | null
    ): EventFilter;

    OwnershipTransferred(previousOwner: null, newOwner: null): EventFilter;
  };

  estimateGas: {
    deployed(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "deployed(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Tells the address of the owner return the address of the owner
     */
    owner(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Tells the address of the owner return the address of the owner
     */
    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Allows the current owner to transfer control of the contract to a newOwner.
     * @param newOwner The address to transfer ownership to.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Allows the current owner to transfer control of the contract to a newOwner.
     * @param newOwner The address to transfer ownership to.
     */
    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    initialize(
      _multisigWallet: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(address)"(
      _multisigWallet: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    deployGrouping(
      _rgToken: string,
      _erc721: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "deployGrouping(address,address)"(
      _rgToken: string,
      _erc721: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getDeployed(overrides?: CallOverrides): Promise<BigNumber>;

    "getDeployed()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    deployed(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "deployed(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Tells the address of the owner return the address of the owner
     */
    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Tells the address of the owner return the address of the owner
     */
    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Allows the current owner to transfer control of the contract to a newOwner.
     * @param newOwner The address to transfer ownership to.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Allows the current owner to transfer control of the contract to a newOwner.
     * @param newOwner The address to transfer ownership to.
     */
    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _multisigWallet: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(address)"(
      _multisigWallet: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    deployGrouping(
      _rgToken: string,
      _erc721: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "deployGrouping(address,address)"(
      _rgToken: string,
      _erc721: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getDeployed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getDeployed()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
