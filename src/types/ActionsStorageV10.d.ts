/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface ActionsStorageV10Interface extends ethers.utils.Interface {
  functions: {
    "dataByEntry(uint256)": FunctionFragment;
    "entriesByCompany(address,uint256)": FunctionFragment;
    "entriesByUser(address,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "pos()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "validations(uint256,uint256)": FunctionFragment;
    "verifiedEntry(address,uint256)": FunctionFragment;
    "initialize(address,address)": FunctionFragment;
    "setResourceActionsContract(address)": FunctionFragment;
    "setERC721(address)": FunctionFragment;
    "approveProduce(uint256)": FunctionFragment;
    "produce(uint256[])": FunctionFragment;
    "measure(uint256[],uint256,address[])": FunctionFragment;
    "pickUp(uint256[],uint256,address[])": FunctionFragment;
    "dropOff(uint256[],uint256,address[],uint256)": FunctionFragment;
    "validateEntry(uint256)": FunctionFragment;
    "getEntriesByCompany(address)": FunctionFragment;
    "getEntriesByUser(address)": FunctionFragment;
    "getEntryData(uint256)": FunctionFragment;
    "getNumOfValidations(uint256)": FunctionFragment;
    "getValidation(uint256,uint256)": FunctionFragment;
    "userHasValidated(address,uint256)": FunctionFragment;
    "userCanValidate(uint256)": FunctionFragment;
    "indexOf(address[],address)": FunctionFragment;
    "getResourceActionsContract()": FunctionFragment;
    "getERC721Contract()": FunctionFragment;
    "getCompaniesContract()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "dataByEntry",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "entriesByCompany",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "entriesByUser",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pos", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "validations",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "verifiedEntry",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setResourceActionsContract",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setERC721", values: [string]): string;
  encodeFunctionData(
    functionFragment: "approveProduce",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "produce",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "measure",
    values: [BigNumberish[], BigNumberish, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "pickUp",
    values: [BigNumberish[], BigNumberish, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "dropOff",
    values: [BigNumberish[], BigNumberish, string[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "validateEntry",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getEntriesByCompany",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getEntriesByUser",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getEntryData",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNumOfValidations",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getValidation",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userHasValidated",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userCanValidate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "indexOf",
    values: [string[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "getResourceActionsContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getERC721Contract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCompaniesContract",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "dataByEntry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "entriesByCompany",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "entriesByUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pos", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifiedEntry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setResourceActionsContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setERC721", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "approveProduce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "produce", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "measure", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pickUp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "dropOff", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "validateEntry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEntriesByCompany",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEntriesByUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEntryData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNumOfValidations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getValidation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userHasValidated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userCanValidate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "indexOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getResourceActionsContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getERC721Contract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCompaniesContract",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class ActionsStorageV10 extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ActionsStorageV10Interface;

  functions: {
    dataByEntry(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        string,
        string,
        BigNumber,
        BigNumber,
        boolean,
        boolean,
        BigNumber,
        BigNumber
      ] & {
        entryType: number;
        company: string;
        signatorie: string;
        timestamp: BigNumber;
        required: BigNumber;
        requiresMultisig: boolean;
        approved: boolean;
        inputOf: BigNumber;
        outputOf: BigNumber;
      }
    >;

    "dataByEntry(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        string,
        string,
        BigNumber,
        BigNumber,
        boolean,
        boolean,
        BigNumber,
        BigNumber
      ] & {
        entryType: number;
        company: string;
        signatorie: string;
        timestamp: BigNumber;
        required: BigNumber;
        requiresMultisig: boolean;
        approved: boolean;
        inputOf: BigNumber;
        outputOf: BigNumber;
      }
    >;

    entriesByCompany(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "entriesByCompany(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    entriesByUser(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "entriesByUser(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    /**
     * Tells the address of the owner return the address of the owner
     */
    owner(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Tells the address of the owner return the address of the owner
     */
    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    pos(overrides?: CallOverrides): Promise<[BigNumber]>;

    "pos()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * Allows the current owner to transfer control of the contract to a newOwner.
     * @param newOwner The address to transfer ownership to.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Allows the current owner to transfer control of the contract to a newOwner.
     * @param newOwner The address to transfer ownership to.
     */
    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    validations(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber] & {
        company: string;
        signatorie: string;
        timestamp: BigNumber;
      }
    >;

    "validations(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber] & {
        company: string;
        signatorie: string;
        timestamp: BigNumber;
      }
    >;

    verifiedEntry(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "verifiedEntry(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize(
      _multiSigWallet: string,
      _erc721: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(address,address)"(
      _multiSigWallet: string,
      _erc721: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setResourceActionsContract(
      _resourceActions: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setResourceActionsContract(address)"(
      _resourceActions: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setERC721(
      _erc721: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setERC721(address)"(
      _erc721: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    approveProduce(
      _entry: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "approveProduce(uint256)"(
      _entry: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    produce(
      _uids: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "produce(uint256[])"(
      _uids: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    measure(
      _uids: BigNumberish[],
      _required: BigNumberish,
      _companies: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "measure(uint256[],uint256,address[])"(
      _uids: BigNumberish[],
      _required: BigNumberish,
      _companies: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    pickUp(
      _uids: BigNumberish[],
      _required: BigNumberish,
      _allowedCompanies: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "pickUp(uint256[],uint256,address[])"(
      _uids: BigNumberish[],
      _required: BigNumberish,
      _allowedCompanies: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    dropOff(
      _uids: BigNumberish[],
      _required: BigNumberish,
      _allowedCompanies: string[],
      _outputOf: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "dropOff(uint256[],uint256,address[],uint256)"(
      _uids: BigNumberish[],
      _required: BigNumberish,
      _allowedCompanies: string[],
      _outputOf: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    validateEntry(
      _entry: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "validateEntry(uint256)"(
      _entry: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Getters
     */
    getEntriesByCompany(
      _company: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    /**
     * Getters
     */
    "getEntriesByCompany(address)"(
      _company: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getEntriesByUser(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    "getEntriesByUser(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getEntryData(
      _entry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        string,
        string,
        BigNumber[],
        BigNumber,
        BigNumber,
        string[],
        boolean,
        boolean,
        BigNumber,
        BigNumber
      ]
    >;

    "getEntryData(uint256)"(
      _entry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        string,
        string,
        BigNumber[],
        BigNumber,
        BigNumber,
        string[],
        boolean,
        boolean,
        BigNumber,
        BigNumber
      ]
    >;

    getNumOfValidations(
      _entry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getNumOfValidations(uint256)"(
      _entry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getValidation(
      _entry: BigNumberish,
      _pos: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string, BigNumber]>;

    "getValidation(uint256,uint256)"(
      _entry: BigNumberish,
      _pos: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string, BigNumber]>;

    userHasValidated(
      _user: string,
      _entry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "userHasValidated(address,uint256)"(
      _user: string,
      _entry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    userCanValidate(
      _entry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "userCanValidate(uint256)"(
      _entry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    indexOf(
      self: string[],
      value: string,
      overrides?: CallOverrides
    ): Promise<[number]>;

    "indexOf(address[],address)"(
      self: string[],
      value: string,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getResourceActionsContract(overrides?: CallOverrides): Promise<[string]>;

    "getResourceActionsContract()"(
      overrides?: CallOverrides
    ): Promise<[string]>;

    getERC721Contract(overrides?: CallOverrides): Promise<[string]>;

    "getERC721Contract()"(overrides?: CallOverrides): Promise<[string]>;

    getCompaniesContract(overrides?: CallOverrides): Promise<[string]>;

    "getCompaniesContract()"(overrides?: CallOverrides): Promise<[string]>;
  };

  dataByEntry(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      number,
      string,
      string,
      BigNumber,
      BigNumber,
      boolean,
      boolean,
      BigNumber,
      BigNumber
    ] & {
      entryType: number;
      company: string;
      signatorie: string;
      timestamp: BigNumber;
      required: BigNumber;
      requiresMultisig: boolean;
      approved: boolean;
      inputOf: BigNumber;
      outputOf: BigNumber;
    }
  >;

  "dataByEntry(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      number,
      string,
      string,
      BigNumber,
      BigNumber,
      boolean,
      boolean,
      BigNumber,
      BigNumber
    ] & {
      entryType: number;
      company: string;
      signatorie: string;
      timestamp: BigNumber;
      required: BigNumber;
      requiresMultisig: boolean;
      approved: boolean;
      inputOf: BigNumber;
      outputOf: BigNumber;
    }
  >;

  entriesByCompany(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "entriesByCompany(address,uint256)"(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  entriesByUser(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "entriesByUser(address,uint256)"(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * Tells the address of the owner return the address of the owner
   */
  owner(overrides?: CallOverrides): Promise<string>;

  /**
   * Tells the address of the owner return the address of the owner
   */
  "owner()"(overrides?: CallOverrides): Promise<string>;

  pos(overrides?: CallOverrides): Promise<BigNumber>;

  "pos()"(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Allows the current owner to transfer control of the contract to a newOwner.
   * @param newOwner The address to transfer ownership to.
   */
  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Allows the current owner to transfer control of the contract to a newOwner.
   * @param newOwner The address to transfer ownership to.
   */
  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  validations(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber] & {
      company: string;
      signatorie: string;
      timestamp: BigNumber;
    }
  >;

  "validations(uint256,uint256)"(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber] & {
      company: string;
      signatorie: string;
      timestamp: BigNumber;
    }
  >;

  verifiedEntry(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "verifiedEntry(address,uint256)"(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    _multiSigWallet: string,
    _erc721: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(address,address)"(
    _multiSigWallet: string,
    _erc721: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setResourceActionsContract(
    _resourceActions: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setResourceActionsContract(address)"(
    _resourceActions: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setERC721(
    _erc721: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setERC721(address)"(
    _erc721: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  approveProduce(
    _entry: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "approveProduce(uint256)"(
    _entry: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  produce(
    _uids: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "produce(uint256[])"(
    _uids: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  measure(
    _uids: BigNumberish[],
    _required: BigNumberish,
    _companies: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "measure(uint256[],uint256,address[])"(
    _uids: BigNumberish[],
    _required: BigNumberish,
    _companies: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  pickUp(
    _uids: BigNumberish[],
    _required: BigNumberish,
    _allowedCompanies: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "pickUp(uint256[],uint256,address[])"(
    _uids: BigNumberish[],
    _required: BigNumberish,
    _allowedCompanies: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  dropOff(
    _uids: BigNumberish[],
    _required: BigNumberish,
    _allowedCompanies: string[],
    _outputOf: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "dropOff(uint256[],uint256,address[],uint256)"(
    _uids: BigNumberish[],
    _required: BigNumberish,
    _allowedCompanies: string[],
    _outputOf: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  validateEntry(
    _entry: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "validateEntry(uint256)"(
    _entry: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Getters
   */
  getEntriesByCompany(
    _company: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  /**
   * Getters
   */
  "getEntriesByCompany(address)"(
    _company: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getEntriesByUser(
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  "getEntriesByUser(address)"(
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getEntryData(
    _entry: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      number,
      string,
      string,
      BigNumber[],
      BigNumber,
      BigNumber,
      string[],
      boolean,
      boolean,
      BigNumber,
      BigNumber
    ]
  >;

  "getEntryData(uint256)"(
    _entry: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      number,
      string,
      string,
      BigNumber[],
      BigNumber,
      BigNumber,
      string[],
      boolean,
      boolean,
      BigNumber,
      BigNumber
    ]
  >;

  getNumOfValidations(
    _entry: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getNumOfValidations(uint256)"(
    _entry: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getValidation(
    _entry: BigNumberish,
    _pos: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, string, BigNumber]>;

  "getValidation(uint256,uint256)"(
    _entry: BigNumberish,
    _pos: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, string, BigNumber]>;

  userHasValidated(
    _user: string,
    _entry: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "userHasValidated(address,uint256)"(
    _user: string,
    _entry: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  userCanValidate(
    _entry: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "userCanValidate(uint256)"(
    _entry: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  indexOf(
    self: string[],
    value: string,
    overrides?: CallOverrides
  ): Promise<number>;

  "indexOf(address[],address)"(
    self: string[],
    value: string,
    overrides?: CallOverrides
  ): Promise<number>;

  getResourceActionsContract(overrides?: CallOverrides): Promise<string>;

  "getResourceActionsContract()"(overrides?: CallOverrides): Promise<string>;

  getERC721Contract(overrides?: CallOverrides): Promise<string>;

  "getERC721Contract()"(overrides?: CallOverrides): Promise<string>;

  getCompaniesContract(overrides?: CallOverrides): Promise<string>;

  "getCompaniesContract()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    dataByEntry(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        string,
        string,
        BigNumber,
        BigNumber,
        boolean,
        boolean,
        BigNumber,
        BigNumber
      ] & {
        entryType: number;
        company: string;
        signatorie: string;
        timestamp: BigNumber;
        required: BigNumber;
        requiresMultisig: boolean;
        approved: boolean;
        inputOf: BigNumber;
        outputOf: BigNumber;
      }
    >;

    "dataByEntry(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        string,
        string,
        BigNumber,
        BigNumber,
        boolean,
        boolean,
        BigNumber,
        BigNumber
      ] & {
        entryType: number;
        company: string;
        signatorie: string;
        timestamp: BigNumber;
        required: BigNumber;
        requiresMultisig: boolean;
        approved: boolean;
        inputOf: BigNumber;
        outputOf: BigNumber;
      }
    >;

    entriesByCompany(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "entriesByCompany(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    entriesByUser(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "entriesByUser(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Tells the address of the owner return the address of the owner
     */
    owner(overrides?: CallOverrides): Promise<string>;

    /**
     * Tells the address of the owner return the address of the owner
     */
    "owner()"(overrides?: CallOverrides): Promise<string>;

    pos(overrides?: CallOverrides): Promise<BigNumber>;

    "pos()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Allows the current owner to transfer control of the contract to a newOwner.
     * @param newOwner The address to transfer ownership to.
     */
    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Allows the current owner to transfer control of the contract to a newOwner.
     * @param newOwner The address to transfer ownership to.
     */
    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    validations(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber] & {
        company: string;
        signatorie: string;
        timestamp: BigNumber;
      }
    >;

    "validations(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber] & {
        company: string;
        signatorie: string;
        timestamp: BigNumber;
      }
    >;

    verifiedEntry(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "verifiedEntry(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      _multiSigWallet: string,
      _erc721: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address,address)"(
      _multiSigWallet: string,
      _erc721: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setResourceActionsContract(
      _resourceActions: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setResourceActionsContract(address)"(
      _resourceActions: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setERC721(_erc721: string, overrides?: CallOverrides): Promise<void>;

    "setERC721(address)"(
      _erc721: string,
      overrides?: CallOverrides
    ): Promise<void>;

    approveProduce(
      _entry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "approveProduce(uint256)"(
      _entry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    produce(_uids: BigNumberish[], overrides?: CallOverrides): Promise<void>;

    "produce(uint256[])"(
      _uids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    measure(
      _uids: BigNumberish[],
      _required: BigNumberish,
      _companies: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    "measure(uint256[],uint256,address[])"(
      _uids: BigNumberish[],
      _required: BigNumberish,
      _companies: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    pickUp(
      _uids: BigNumberish[],
      _required: BigNumberish,
      _allowedCompanies: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    "pickUp(uint256[],uint256,address[])"(
      _uids: BigNumberish[],
      _required: BigNumberish,
      _allowedCompanies: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    dropOff(
      _uids: BigNumberish[],
      _required: BigNumberish,
      _allowedCompanies: string[],
      _outputOf: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "dropOff(uint256[],uint256,address[],uint256)"(
      _uids: BigNumberish[],
      _required: BigNumberish,
      _allowedCompanies: string[],
      _outputOf: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    validateEntry(
      _entry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "validateEntry(uint256)"(
      _entry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Getters
     */
    getEntriesByCompany(
      _company: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    /**
     * Getters
     */
    "getEntriesByCompany(address)"(
      _company: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getEntriesByUser(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "getEntriesByUser(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getEntryData(
      _entry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        string,
        string,
        BigNumber[],
        BigNumber,
        BigNumber,
        string[],
        boolean,
        boolean,
        BigNumber,
        BigNumber
      ]
    >;

    "getEntryData(uint256)"(
      _entry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        string,
        string,
        BigNumber[],
        BigNumber,
        BigNumber,
        string[],
        boolean,
        boolean,
        BigNumber,
        BigNumber
      ]
    >;

    getNumOfValidations(
      _entry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getNumOfValidations(uint256)"(
      _entry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getValidation(
      _entry: BigNumberish,
      _pos: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string, BigNumber]>;

    "getValidation(uint256,uint256)"(
      _entry: BigNumberish,
      _pos: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string, BigNumber]>;

    userHasValidated(
      _user: string,
      _entry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "userHasValidated(address,uint256)"(
      _user: string,
      _entry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    userCanValidate(
      _entry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "userCanValidate(uint256)"(
      _entry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    indexOf(
      self: string[],
      value: string,
      overrides?: CallOverrides
    ): Promise<number>;

    "indexOf(address[],address)"(
      self: string[],
      value: string,
      overrides?: CallOverrides
    ): Promise<number>;

    getResourceActionsContract(overrides?: CallOverrides): Promise<string>;

    "getResourceActionsContract()"(overrides?: CallOverrides): Promise<string>;

    getERC721Contract(overrides?: CallOverrides): Promise<string>;

    "getERC721Contract()"(overrides?: CallOverrides): Promise<string>;

    getCompaniesContract(overrides?: CallOverrides): Promise<string>;

    "getCompaniesContract()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    OwnershipTransferred(previousOwner: null, newOwner: null): EventFilter;
  };

  estimateGas: {
    dataByEntry(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "dataByEntry(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    entriesByCompany(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "entriesByCompany(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    entriesByUser(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "entriesByUser(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Tells the address of the owner return the address of the owner
     */
    owner(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Tells the address of the owner return the address of the owner
     */
    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    pos(overrides?: CallOverrides): Promise<BigNumber>;

    "pos()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Allows the current owner to transfer control of the contract to a newOwner.
     * @param newOwner The address to transfer ownership to.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Allows the current owner to transfer control of the contract to a newOwner.
     * @param newOwner The address to transfer ownership to.
     */
    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    validations(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "validations(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verifiedEntry(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "verifiedEntry(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _multiSigWallet: string,
      _erc721: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(address,address)"(
      _multiSigWallet: string,
      _erc721: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setResourceActionsContract(
      _resourceActions: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setResourceActionsContract(address)"(
      _resourceActions: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setERC721(_erc721: string, overrides?: Overrides): Promise<BigNumber>;

    "setERC721(address)"(
      _erc721: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    approveProduce(
      _entry: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "approveProduce(uint256)"(
      _entry: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    produce(_uids: BigNumberish[], overrides?: Overrides): Promise<BigNumber>;

    "produce(uint256[])"(
      _uids: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    measure(
      _uids: BigNumberish[],
      _required: BigNumberish,
      _companies: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "measure(uint256[],uint256,address[])"(
      _uids: BigNumberish[],
      _required: BigNumberish,
      _companies: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    pickUp(
      _uids: BigNumberish[],
      _required: BigNumberish,
      _allowedCompanies: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "pickUp(uint256[],uint256,address[])"(
      _uids: BigNumberish[],
      _required: BigNumberish,
      _allowedCompanies: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    dropOff(
      _uids: BigNumberish[],
      _required: BigNumberish,
      _allowedCompanies: string[],
      _outputOf: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "dropOff(uint256[],uint256,address[],uint256)"(
      _uids: BigNumberish[],
      _required: BigNumberish,
      _allowedCompanies: string[],
      _outputOf: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    validateEntry(
      _entry: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "validateEntry(uint256)"(
      _entry: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Getters
     */
    getEntriesByCompany(
      _company: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Getters
     */
    "getEntriesByCompany(address)"(
      _company: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEntriesByUser(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getEntriesByUser(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEntryData(
      _entry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getEntryData(uint256)"(
      _entry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNumOfValidations(
      _entry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getNumOfValidations(uint256)"(
      _entry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getValidation(
      _entry: BigNumberish,
      _pos: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getValidation(uint256,uint256)"(
      _entry: BigNumberish,
      _pos: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userHasValidated(
      _user: string,
      _entry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userHasValidated(address,uint256)"(
      _user: string,
      _entry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userCanValidate(
      _entry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userCanValidate(uint256)"(
      _entry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    indexOf(
      self: string[],
      value: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "indexOf(address[],address)"(
      self: string[],
      value: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getResourceActionsContract(overrides?: CallOverrides): Promise<BigNumber>;

    "getResourceActionsContract()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getERC721Contract(overrides?: CallOverrides): Promise<BigNumber>;

    "getERC721Contract()"(overrides?: CallOverrides): Promise<BigNumber>;

    getCompaniesContract(overrides?: CallOverrides): Promise<BigNumber>;

    "getCompaniesContract()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    dataByEntry(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "dataByEntry(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    entriesByCompany(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "entriesByCompany(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    entriesByUser(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "entriesByUser(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Tells the address of the owner return the address of the owner
     */
    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Tells the address of the owner return the address of the owner
     */
    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pos(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "pos()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Allows the current owner to transfer control of the contract to a newOwner.
     * @param newOwner The address to transfer ownership to.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Allows the current owner to transfer control of the contract to a newOwner.
     * @param newOwner The address to transfer ownership to.
     */
    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    validations(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "validations(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verifiedEntry(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "verifiedEntry(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _multiSigWallet: string,
      _erc721: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(address,address)"(
      _multiSigWallet: string,
      _erc721: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setResourceActionsContract(
      _resourceActions: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setResourceActionsContract(address)"(
      _resourceActions: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setERC721(
      _erc721: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setERC721(address)"(
      _erc721: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    approveProduce(
      _entry: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "approveProduce(uint256)"(
      _entry: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    produce(
      _uids: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "produce(uint256[])"(
      _uids: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    measure(
      _uids: BigNumberish[],
      _required: BigNumberish,
      _companies: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "measure(uint256[],uint256,address[])"(
      _uids: BigNumberish[],
      _required: BigNumberish,
      _companies: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    pickUp(
      _uids: BigNumberish[],
      _required: BigNumberish,
      _allowedCompanies: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "pickUp(uint256[],uint256,address[])"(
      _uids: BigNumberish[],
      _required: BigNumberish,
      _allowedCompanies: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    dropOff(
      _uids: BigNumberish[],
      _required: BigNumberish,
      _allowedCompanies: string[],
      _outputOf: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "dropOff(uint256[],uint256,address[],uint256)"(
      _uids: BigNumberish[],
      _required: BigNumberish,
      _allowedCompanies: string[],
      _outputOf: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    validateEntry(
      _entry: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "validateEntry(uint256)"(
      _entry: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Getters
     */
    getEntriesByCompany(
      _company: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Getters
     */
    "getEntriesByCompany(address)"(
      _company: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEntriesByUser(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getEntriesByUser(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEntryData(
      _entry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getEntryData(uint256)"(
      _entry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNumOfValidations(
      _entry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getNumOfValidations(uint256)"(
      _entry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getValidation(
      _entry: BigNumberish,
      _pos: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getValidation(uint256,uint256)"(
      _entry: BigNumberish,
      _pos: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userHasValidated(
      _user: string,
      _entry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "userHasValidated(address,uint256)"(
      _user: string,
      _entry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userCanValidate(
      _entry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "userCanValidate(uint256)"(
      _entry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    indexOf(
      self: string[],
      value: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "indexOf(address[],address)"(
      self: string[],
      value: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getResourceActionsContract(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getResourceActionsContract()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getERC721Contract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getERC721Contract()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCompaniesContract(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getCompaniesContract()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
