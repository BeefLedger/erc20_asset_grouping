/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface DealRoomHubV10Interface extends ethers.utils.Interface {
  functions: {
    "makeRoom(tuple)": FunctionFragment;
    "getUserRooms(address)": FunctionFragment;
    "getAllRooms()": FunctionFragment;
    "getRoom(address)": FunctionFragment;
    "roomCount()": FunctionFragment;
    "changeOwner(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "makeRoom",
    values: [
      {
        buyer: string;
        seller: string;
        arbitrator: string;
        sensorApprover: string;
        docApprover: string;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserRooms",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllRooms",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getRoom", values: [string]): string;
  encodeFunctionData(functionFragment: "roomCount", values?: undefined): string;
  encodeFunctionData(functionFragment: "changeOwner", values: [string]): string;

  decodeFunctionResult(functionFragment: "makeRoom", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getUserRooms",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllRooms",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRoom", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "roomCount", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeOwner",
    data: BytesLike
  ): Result;

  events: {
    "NewRoomEvent(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewRoomEvent"): EventFragment;
}

export class DealRoomHubV10 extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: DealRoomHubV10Interface;

  functions: {
    makeRoom(
      params: {
        buyer: string;
        seller: string;
        arbitrator: string;
        sensorApprover: string;
        docApprover: string;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "makeRoom(tuple)"(
      params: {
        buyer: string;
        seller: string;
        arbitrator: string;
        sensorApprover: string;
        docApprover: string;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getUserRooms(_user: string, overrides?: CallOverrides): Promise<[string[]]>;

    "getUserRooms(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getAllRooms(overrides?: CallOverrides): Promise<[string[]]>;

    "getAllRooms()"(overrides?: CallOverrides): Promise<[string[]]>;

    getRoom(
      addr: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, string, string, string, string, string, string, string] & {
          addr: string;
          buyer: string;
          seller: string;
          arbitrator: string;
          sensorApprover: string;
          docApprover: string;
          dealMultiSig: string;
          agentMultiSig: string;
        }
      ]
    >;

    "getRoom(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, string, string, string, string, string, string, string] & {
          addr: string;
          buyer: string;
          seller: string;
          arbitrator: string;
          sensorApprover: string;
          docApprover: string;
          dealMultiSig: string;
          agentMultiSig: string;
        }
      ]
    >;

    roomCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "roomCount()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    changeOwner(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "changeOwner(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  makeRoom(
    params: {
      buyer: string;
      seller: string;
      arbitrator: string;
      sensorApprover: string;
      docApprover: string;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "makeRoom(tuple)"(
    params: {
      buyer: string;
      seller: string;
      arbitrator: string;
      sensorApprover: string;
      docApprover: string;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getUserRooms(_user: string, overrides?: CallOverrides): Promise<string[]>;

  "getUserRooms(address)"(
    _user: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getAllRooms(overrides?: CallOverrides): Promise<string[]>;

  "getAllRooms()"(overrides?: CallOverrides): Promise<string[]>;

  getRoom(
    addr: string,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, string, string, string, string, string] & {
      addr: string;
      buyer: string;
      seller: string;
      arbitrator: string;
      sensorApprover: string;
      docApprover: string;
      dealMultiSig: string;
      agentMultiSig: string;
    }
  >;

  "getRoom(address)"(
    addr: string,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, string, string, string, string, string] & {
      addr: string;
      buyer: string;
      seller: string;
      arbitrator: string;
      sensorApprover: string;
      docApprover: string;
      dealMultiSig: string;
      agentMultiSig: string;
    }
  >;

  roomCount(overrides?: CallOverrides): Promise<BigNumber>;

  "roomCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  changeOwner(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "changeOwner(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    makeRoom(
      params: {
        buyer: string;
        seller: string;
        arbitrator: string;
        sensorApprover: string;
        docApprover: string;
      },
      overrides?: CallOverrides
    ): Promise<string>;

    "makeRoom(tuple)"(
      params: {
        buyer: string;
        seller: string;
        arbitrator: string;
        sensorApprover: string;
        docApprover: string;
      },
      overrides?: CallOverrides
    ): Promise<string>;

    getUserRooms(_user: string, overrides?: CallOverrides): Promise<string[]>;

    "getUserRooms(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getAllRooms(overrides?: CallOverrides): Promise<string[]>;

    "getAllRooms()"(overrides?: CallOverrides): Promise<string[]>;

    getRoom(
      addr: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, string, string, string, string] & {
        addr: string;
        buyer: string;
        seller: string;
        arbitrator: string;
        sensorApprover: string;
        docApprover: string;
        dealMultiSig: string;
        agentMultiSig: string;
      }
    >;

    "getRoom(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, string, string, string, string] & {
        addr: string;
        buyer: string;
        seller: string;
        arbitrator: string;
        sensorApprover: string;
        docApprover: string;
        dealMultiSig: string;
        agentMultiSig: string;
      }
    >;

    roomCount(overrides?: CallOverrides): Promise<BigNumber>;

    "roomCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    changeOwner(newOwner: string, overrides?: CallOverrides): Promise<void>;

    "changeOwner(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    NewRoomEvent(addr: null): EventFilter;
  };

  estimateGas: {
    makeRoom(
      params: {
        buyer: string;
        seller: string;
        arbitrator: string;
        sensorApprover: string;
        docApprover: string;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "makeRoom(tuple)"(
      params: {
        buyer: string;
        seller: string;
        arbitrator: string;
        sensorApprover: string;
        docApprover: string;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    getUserRooms(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getUserRooms(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAllRooms(overrides?: CallOverrides): Promise<BigNumber>;

    "getAllRooms()"(overrides?: CallOverrides): Promise<BigNumber>;

    getRoom(addr: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getRoom(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    roomCount(overrides?: CallOverrides): Promise<BigNumber>;

    "roomCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    changeOwner(newOwner: string, overrides?: Overrides): Promise<BigNumber>;

    "changeOwner(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    makeRoom(
      params: {
        buyer: string;
        seller: string;
        arbitrator: string;
        sensorApprover: string;
        docApprover: string;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "makeRoom(tuple)"(
      params: {
        buyer: string;
        seller: string;
        arbitrator: string;
        sensorApprover: string;
        docApprover: string;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getUserRooms(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getUserRooms(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAllRooms(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getAllRooms()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRoom(
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRoom(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    roomCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "roomCount()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    changeOwner(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "changeOwner(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
